version: '3.9'

services:
  cardano-node:
    image: ghcr.io/cardano-community/cardano-node:10.4.1
    init: true
    hostname: cardano-node
    environment:
      NETWORK: ${NETWORK}
      MITHRIL_DOWNLOAD: "Y"
      CNODE_PORT: ${CARDANO_NODE_PORT:-6000}
      SOCKET: "${CNODE_HOME}/sockets/node.socket"
      UPDATE_CHECK: "N"
    volumes:
      - node-db:/opt/cardano/cnode/db
      - node-ipc:/opt/cardano/cnode/sockets
      - node-cfg:/opt/cardano/cnode/files
      - ./scripts/:/scripts/:O
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "/scripts/lib/node_healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  postgres:
    image: docker.io/postgres:17.2-bookworm
    hostname: postgres
    volumes:
      - postgresdb:/var/lib/postgresql/data
      - ./scripts/:/scripts/:O
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    environment:
      PGPORT: ${POSTGRES_PORT}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      RPC_SCHEMA: ${RPC_SCHEMA}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
    command: >
      postgres -p ${POSTGRES_PORT}
               -c max_connections=${PG_MAX_CONNECTIONS}
               -c maintenance_work_mem=${PG_MAINTENANCE_WORK_MEM}
               -c max_parallel_maintenance_workers=${PG_PARALLEL_MAINT_WORKERS}
               -c shared_buffers=${PG_SHARED_BUFFERS}
               -c wal_level=minimal
               -c max_wal_senders=0
               -c synchronous_commit=off
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  cardano-db-sync:
    image: ghcr.io/intersectmbo/cardano-db-sync:13.6.0.5
    hostname: cardano-db-sync
    environment:
      NETWORK: ${NETWORK:-mainnet}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      RESTORE_SNAPSHOT: ${RESTORE_SNAPSHOT:-}
      RESTORE_RECREATE_DB: "N"
      DB_SYNC_CONFIG: ${DB_SYNC_CONFIG}
    healthcheck:
      test: ["CMD-SHELL", "/scripts/lib/dbsync_healthcheck.sh"]
      interval: 60s
      timeout: 10s
    depends_on:
      cardano-node:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - db-sync-data:/var/lib/cexplorer
      - node-ipc:/node-ipc
      - node-cfg:/opt/cardano/cnode/files
      - ./configs/dbsync:/dbsync-cfg:O
      - ./scripts/:/scripts/:O
      - ./snapshots/:/snapshots:O
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  cron:
    build: .
    depends_on:
      postgres:
        condition: service_healthy
      cardano-db-sync:
        condition: service_healthy
    environment:
      NETWORK: ${NETWORK:-mainnet}
      PGHOST: postgres
      PGPORT: ${POSTGRES_PORT}
      PGDATABASE: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      RPC_SCHEMA: ${RPC_SCHEMA}
    volumes:
      - ./scripts/cron:/etc/cron.d/:O
      - ./scripts:/scripts:O
    # Uncomment for persistent logs
    # - ./logs:/var/log
    restart: unless-stopped

  postgrest:
    image: docker.io/postgrest/postgrest:latest
    hostname: postgrest
    depends_on:
      postgres:
        condition: service_healthy
      cardano-db-sync:
        condition: service_healthy
    ports:
      - "${POSTGREST_PORT}:${POSTGREST_PORT}"
    volumes:
      - ./scripts/:/scripts/:O
    environment:
      PGRST_DB_URI: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
      PGRST_DB_ANON_ROLE: ${PGRST_DB_ANON_ROLE}
      PGRST_DB_SCHEMA: ${RPC_SCHEMA}
      PGRST_SERVER_PORT: ${POSTGREST_PORT}
      PGRST_OPENAPI_SERVER_PROXY_URI: http://0.0.0.0:${POSTGREST_PORT}
      PGRST_DB_MAX_ROWS: 1000
      PGRST_DB_AGGREGATES_ENABLED: true
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  haproxy:
    image: ghcr.io/haproxytech/haproxy-docker-alpine:3.1.2
    hostname: haproxy
    depends_on:
      cardano-db-sync:
        condition: service_healthy
    volumes:
      - ./configs/haproxy/:/usr/local/etc/haproxy/:O
      - ./scripts/:/scripts/:O
    entrypoint: >
      sh -c '
        cp /usr/local/etc/haproxy/haproxy.cfg.tmpl /tmp/haproxy.cfg

        sed -i -e "s/__HAPROXY_PORT__/${HAPROXY_PORT}/g" \
              -e "s/__POSTGREST_PORT__/${POSTGREST_PORT}/g" /tmp/haproxy.cfg

        exec haproxy -W -db -f /tmp/haproxy.cfg
      '
    ports:
      - "${HAPROXY_PORT}:${HAPROXY_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "haproxy -c -f /tmp/haproxy.cfg"]
      interval: 10s 
      timeout: 5s
      retries: 5
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

volumes:
  node-db:
  node-ipc:
  node-cfg:
  db-sync-data:
  postgresdb:
